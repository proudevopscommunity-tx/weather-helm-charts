# Default values for weather.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository_ui: proudevops/ui-weather
  repository_redis: proudevops/redis
  repository_weather: proudevops/weather
  repository_auth: proudevops/auth
  repository_db: mysql
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag_ui: latest
  tag_redis: latest
  tag_weather: latest
  tag_auth: latest
  tag_db: 5.7.9

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type_ui: ClusterIP
  type: ClusterIP
  port_ui: 3000
  target_port_ui: 3000
  port_auth: 8080
  port_weather: 5000
  port_redis: 6379
  port_db: 3306

ingress:
  enabled: true
  className: my-aws-ingress-class #alb
  annotations: 
    alb.ingress.kubernetes.io/load_balancer_name: external-dns-ingress
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    # Heath check settings
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP 
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port  
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    # SSL settings
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP":80}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    # External dns settings
    external-dns.alpha.kubernetes.io/hostname: default.tclovis.com,ui.tclovis.com
  hosts:
    - host: ui.tclovis.com
      paths:
        - path: /
          pathType: Prefix
          
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true
env:
  configmap_name: app-configmap
  secret_name: app-secrets
  auth_host: AUTH_HOST
  auth_port: AUTH_PORT
  weather_host: WEATHER_HOST
  weather_port: WEATHER_PORT
  redis_user: REDIS_USER
  redis_host: REDIS_HOST
  redis_password: REDIS_PASSWORD
  api_key: APIKEY

configmap:
  MYSQL_DATABASE: weatherapp
  MYSQL_USER: admin
  DB_HOST: db 
  DB_PORT: "3306" 
  REDIS_USER: redis 
  AUTH_HOST: auth 
  AUTH_PORT: "8080" 
  WEATHER_PORT: "5000" 
  WEATHER_HOST: weather 
  REDIS_HOST: redis 

pvc:
  storage: "1Gi"
  mode: Filesystem
  access_mode: ReadWriteOnce
  policy: Delete
  class_name: manual
  path: "/var/lib/mysql"



nodeSelector: {}

tolerations: []

affinity: {}
